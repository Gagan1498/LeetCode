/**************************************************************************************************************************************************************************************************
Approach
Instead of first converting the array into an actual number, add 1 and then convert the number back into array, you do the following:

1. Malloc a new array which has 1 more element than the current given array.

2. Then just add 1 to the last element and check if it has carry or not. For example:

   a. If last element is 1, then, 1+ 1 =2 (here no carry).
   b. If last element is 9, then, 9 + 1 = 10 (here the last element will be 0, and carry will be 1).

3. Then basically, just keep adding that carry until the first element and use simple math to determine the carry and the actual array number at each index (This will all be done in a for loop).

4. Keep adding elements in the new array.

5. Then, if there is no carry after the first element, shift all digits by 1 to the left using a simple for loop and pass the returnsize as the original array size.

6. Else, add carry at index 0 of the new array and retrun the size of new array as the original array size + 1.
**************************************************************************************************************************************************************************************************/

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* plusOne(int* digits, int digitsSize, int* returnSize) {
    int carry=1;
    int sum=0;
    int *result = (int *)malloc((digitsSize+1)*sizeof(int));

    for(int i=digitsSize-1;i>=0;i--){
        sum = *(digits + i) + carry;
        result[i+1] = sum % 10;
        carry = sum / 10;
    }

    if(carry==0){
        for(int i=0;i<digitsSize;i++){
            result[i] = result [i+1];
            *returnSize = digitsSize;
        }    
    }
    else{
        result[0] = carry;
        *returnSize = digitsSize + 1;
    }

    return result;
}
